# ******************************************************** #
# V2 of the AWS Lambda Deploy workflow adds caching the Docker image on AWS ECR so
# subsequent runs of the workflow doesn't require rebuilding the image from scratch.
# The Dockerfile is simple in this example, but a more production-grade Dockerfile
# with linux packages to install, a lengthier requirements.txt file, etc. will
# benenfit greatly from image caching.
# ******************************************************** #

name: AWS Lambda Deploy V2

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:  # trigger manually

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      ECR_IMAGE_TAG: latest
      AWS_DEFAULT_REGION: us-east-2
      AWS_LAMBDA_FUNC_NAME: aws-lambda-demo-lambda
      AWS_ECR_REPOSITORY_NAME: aws-lambda-demo-ecr

    steps:
    - name: checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-deploy-image
      uses: whoan/docker-build-with-cache-action@v5
      with:
        username: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        password: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        registry: ${{ steps.login-ecr.outputs.registry }}
        image_name: ${{ env.AWS_ECR_REPOSITORY_NAME }}
        build_extra_args: >-
          --build-arg WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}
          --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          --build-arg AWS_DEFAULT_REGION=${{ env.AWS_DEFAULT_REGION }}
          --build-arg EMAIL_USER=${{ secrets.EMAIL_USER }}
          --build-arg EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
        push_image_and_stages: true
    
    - name: Deploy to AWS Lambda
      run: |
        aws lambda update-function-code \
        --function-name ${{ env.AWS_LAMBDA_FUNC_NAME }} \
        --image-uri "${{ secrets.AWS_ECR_IMAGE_URI }}:${{ env.ECR_IMAGE_TAG }}"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}